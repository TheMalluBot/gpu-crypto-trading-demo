name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Windows releases
        run: |
          npm run build
          cd src-tauri
          cargo build --release
          cd ..
          npm run tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          retention-days: 5

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgtk-3-dev \
            patchelf
      
      - name: Install CUDA (optional)
        continue-on-error: true
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-toolkit-12-3
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build Linux releases
        run: |
          npm run build
          cd src-tauri
          cargo build --release
          cd ..
          npm run tauri build
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage
          retention-days: 5

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
      
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build macOS releases
        run: |
          npm run build
          cd src-tauri
          cargo build --release
          cd ..
          npm run tauri build -- --target universal-apple-darwin
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            src-tauri/target/release/bundle/dmg/*.dmg
            src-tauri/target/release/bundle/macos/*.app
          retention-days: 5

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create checksums
        run: |
          cd artifacts
          find . -type f -exec sha256sum {} \; > SHA256SUMS
          cd ..
      
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: GPU Crypto Trader Pro ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            # GPU Crypto Trader Pro ${{ steps.version.outputs.version }}
            
            ## ðŸš€ Features
            - GPU-accelerated trading algorithms (CUDA, DirectX 12, Vulkan)
            - Multi-token portfolio management
            - Indian tax compliance (TDS, STCG, LTCG)
            - Binance fee optimization
            - AI-powered trading strategies
            - Advanced analytics dashboard
            - Real-time profit maintenance
            - Auto-rebalancing system
            
            ## ðŸ“¦ Downloads
            
            ### Windows
            - MSI Installer (recommended)
            - NSIS Installer (alternative)
            
            ### Linux
            - AppImage (universal)
            - DEB package (Ubuntu/Debian)
            - RPM package (Fedora/RHEL)
            
            ### macOS
            - DMG installer
            - App bundle
            
            ## ðŸ”’ Verify Downloads
            Use the SHA256SUMS file to verify the integrity of downloaded files.
            
            ## ðŸ“‹ System Requirements
            - 4GB RAM minimum (8GB recommended)
            - GPU with CUDA/DirectX 12/Vulkan support (optional, for acceleration)
            - Internet connection for real-time trading
            
            ## ðŸ“– Documentation
            See the [README](https://github.com/${{ github.repository }}/blob/main/README.md) for installation and usage instructions.
          files: |
            artifacts/**/*.msi
            artifacts/**/*.exe
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
            artifacts/**/*.app
            artifacts/SHA256SUMS